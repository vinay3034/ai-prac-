MAX, MIN = 1000, -1000 
def minimax(depth, nodeIndex, maximizingPlayer, values, alpha, beta):  
    if depth == 3: 
        return values[nodeIndex] 
    if maximizingPlayer:      
        best = MIN
        for i in range(0, 2):          
            val = minimax(depth + 1, nodeIndex * 2 + i,False, values, alpha, beta) 
            best = max(best, val) 
            alpha = max(alpha, best) 
            if beta <= alpha: 
                break  
        return best       
    else:
        best = MAX 
        for i in range(0, 2): 
            val = minimax(depth + 1, nodeIndex * 2 + i, True, values, alpha, beta) 
            best = min(best, val) 
            beta = min(beta, best) 
            if beta <= alpha: 
                break
        return best      
values = [3, 5, 6, 9, 1, 2, 0, -1]  
print("The optimal value is :", minimax(0, 0, True, values, MIN, MAX))


prac 3 b hill vlimping
import math
def hill_climbing(f,x_start,step_size,max_iterations):
    x_current=x_start
    for i in range(max_iterations):
        current_value=f(x_current)
        x_left=x_current-step_size
        x_right=x_current+step_size
        left_value=f(x_left)
        right_value=f(x_right)
        if left_value > current_value:
            x_current = x_left
        elif right_value > current_value:
            x_current = x_right
        else:
            break
    return x_current,f(x_current)
def f(x):
    return -(x-3)**2+10
x_start=0
step_size=0.1
max_iterations=100
solution,max_value=hill_climbing(f,x_start,step_size,max_iterations)
print(f"Found maximum at x={solution}, f(x)={max_value}")

